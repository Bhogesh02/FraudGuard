#!/usr/bin/env python3
"""
FraudGuard Model Training Script with Progress Indicators
=======================================================

This script demonstrates the enhanced training process with:
- Real-time progress bars
- Time estimates
- Animated headers
- Step-by-step progress tracking
- Beautiful completion messages

Usage:
    python train_model.py
"""

import subprocess
import sys
import os

def main():
    """Run the enhanced model training with progress indicators"""
    
    print("üöÄ Starting FraudGuard Model Training with Progress Indicators")
    print("=" * 70)
    
    # Check if required files exist
    if not os.path.exists('fraud_model.py'):
        print("‚ùå Error: fraud_model.py not found!")
        print("Please make sure you're in the correct directory.")
        return
    
    # Check if creditcard.csv exists
    if not os.path.exists('creditcard.csv'):
        print("‚ö†Ô∏è  Warning: creditcard.csv not found.")
        print("The script will create synthetic data for training.")
        print()
    
    # Run the training script
    try:
        print("üìä Starting training process...")
        print("üí° You'll see:")
        print("   ‚Ä¢ Animated progress bars")
        print("   ‚Ä¢ Real-time time estimates")
        print("   ‚Ä¢ Step-by-step progress tracking")
        print("   ‚Ä¢ Beautiful completion messages")
        print()
        
        # Run the fraud_model.py script
        result = subprocess.run([sys.executable, 'fraud_model.py'], 
                              capture_output=False, text=True)
        
        if result.returncode == 0:
            print("\nüéâ Training completed successfully!")
            print("‚úÖ Model files have been saved:")
            print("   ‚Ä¢ fraud_detector_model.pkl")
            print("   ‚Ä¢ amount_scaler.pkl")
            print("   ‚Ä¢ model_feature_columns.pkl")
            print("   ‚Ä¢ optimal_threshold.pkl")
        else:
            print(f"\n‚ùå Training failed with return code: {result.returncode}")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Training interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Error during training: {e}")

if __name__ == "__main__":
    main() 